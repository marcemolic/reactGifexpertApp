{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","add","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAQzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAKEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BChBlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAkBZM,GAlBY,4CAAH,sDCLPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAQhC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCRFO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAMtB,ECFwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA4BA,OAvBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAO1B,CAACpB,IASGqB,ED5BwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAkCpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEKH,EAAOJ,KAAI,SAAAI,GAAM,OAId,aAFA,CAEC,EAAD,eAGQA,GAFCA,EAAOF,aEJrBgB,EAjDM,WAIjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAgBA,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OAQnB,aAPA,CAOC,EAAD,CAEIA,SAAUA,GADLA,Y,MCrCjC6B,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.0b346169.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* \r\ncuando se realiza una cominicacion entre componentes se puede usar  props en\r\no se puede desextructurar  como el siguiente ejemplo\r\n*/\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n\r\n    /* \r\n    para crear un input dinamico  se necesita el useState  como primer argunento\r\n    con esto tendremos lo necesario para darle un valor predeterminado y/o los componentes para obtener elk valor \r\n    y mostralo en pantalla\r\n    */\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    /* \r\n    con esta constante  obtengo  los cambios que se dan en el input y\r\n    con el setInputValue doy el cambio en el useState \r\n     */\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    /* con esto, al darle enter  podremos porvocar un evento */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Submit hecho!!');\r\n        /* es es un validador  simple para evitar errores \r\n         en valores vacios\r\n        */\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(add => [ inputValue ,...add]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            \r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n    \r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","/**\r\n *  Helpers\r\n * un archivo donde puedes tener funciones externa a un componente\r\n * si se sigue los parametros de importacion y exportacion se manejara sin prblema\r\n * OJO, debe tener un return y funcionara como una aplicacion fetch \r\n */\r\n\r\nexport const getGifs = async ( category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=WQM2sATqFFUSypjnJrBHsj0JSD6u20tX`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    /**\r\n     * ya por ultimo llamamos setState para agregar los datos de la api al useState\r\n     */\r\n    // console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(props)\r\n    /**\r\n     * puede ocupar un componente externo para darle forma a un listado \r\n     * que este  listado componentes para asi no saturar el componente, solo ahi que\r\n     *  conectar los componente conectar los componentes correctamente\r\n     */\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\" >\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    /**\r\n     * se crea un listado dinamico con el elemento useStatecon los nombres pertinentes\r\n     */\r\n    // const [images, setImages] = useState([]);\r\n    \r\n    const {data:images, loading} = useFetchGifs(category) ;\r\n\r\n\r\n\r\n    \r\n    // /*\r\n    // useEffect \r\n    // Es un componente de react que ayuda a controlar la detonacion de una funcion de \r\n    // cuando se renderisa el componente haciendolo llamar solo una vez\r\n    // si que es que ahi una funcion  que se llama muchas veces a travez de un evento\r\n    // */\r\n    // useEffect(() => {\r\n    //     /*  \r\n    //     al llamar la funcion que no queremos repetir dentro de la funcion useEffect\r\n    //     este evita la detonacion multiple por la funcion detonado si no es llamado \r\n    //     */\r\n    //     // getGifs();\r\n    //     // aca es donde se llama el helper de este programa interactuando como un fetch\r\n         \r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs))\r\n    //         /**la seccion de abajo evita errores en caso de que el elemento llamado al UseEffect\r\n    //          * cambie de algun modo o se quiera llamar otra vez\r\n    //          */\r\n    // }, [category])\r\n    // /**\r\n    //  * luego, aca llamamos a la api donde sacamos los componentes y filtramos los datos \r\n    //  * que necesitamos para identificarlo  y darle orden y mostar la imagen\r\n    //  *  // revisar getGifs.js\r\n    //  */\r\n\r\n\r\n    // // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n            {/* {loading ? 'cargando...': 'data cargada'} */}\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {images.map(images => (\r\n\r\n                    //    <li key={images.id}>item: {images.title}</li>\r\n\r\n                    <GifGridItem\r\n                        key={images.id}\r\n                        //para mandar todos los parametros de un objeto por el props se ocupa eso\r\n                        {...images}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","/**\r\n * hooks \r\n * son funciones que sirve para darle dinamismo al codigo y asi ayudan a limpiar todo el codigo\r\n * **********************************************************************************************\r\n *  esto cambiara tod el codigo que tenemos hasta ahora para simplificar todo \r\n */\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                \r\n                // setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                // }, 3000);\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7,8,9,10,11,12],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state;   //{ data: [], loading: true};\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //hajime no ippo\r\n\r\n    //     // solucion que hice y salio incorrecta \r\n    //     // setCategories(add =>{\r\n    //     //     add.push('hajime no ippo')\r\n    //     // })\r\n    //     // solucion correcta 1\r\n    //     // setCategories([...categories, 'hajime no ippo']);\r\n    //     //solucion correcta 2 (pero da mas personalizacion )\r\n    //     setCategories(add =>[...add, 'hajime no ippo']);\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            {/* <button onClick={handleAdd}> Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        //esto es una solucion pero no la correcta por conficto en modificaciones\r\n                        // categories.map((category, idx) => {\r\n                        // return <li key={idx} > {idx + 1} </li>\r\n                        // una solucion que si sirve es y evita el problema es este problema\r\n                        // return <li key={category}> {category} </li>\r\n\r\n                        // si es  un solo componente se puede intercambiar los{} por () y evitas escribir el return\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './gifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n\n  <GifExpertApp/ >,\n  \n  document.getElementById('root')\n);\n\n// tarea crear un componente GifExpertApp que contenga\n//<h2>GifExpertApp </h2>\n// <hr />"],"sourceRoot":""}